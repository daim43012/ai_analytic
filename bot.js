// ‚úÖ bot.js
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import { TELEGRAM_TOKEN, CHANNEL_ID, SUBSCRIPTION_DAYS } from './config.js';
import { addOrUpdateUser, getSubscription, isAccessKeyValid, useAccessKey } from './db.js';

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const awaitingCode = new Set();

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
bot.onText(/\/start/, (msg) => {
	const userId = msg.chat.id;
	getSubscription(userId, (sub) => {
		const now = new Date();
		const active = sub && new Date(sub.end_date) > now;

		const text = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ ETF-–ø–æ—Ä—Ç—Ñ–µ–ª—è–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ AI-—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ.

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
		`;

		const buttons = [
			[{ text: 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'pay_now' }]
		];

		if (!active) {
			buttons[0].push({ text: 'üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'enter_code' });
		}

		bot.sendMessage(userId, text, {
			reply_markup: { inline_keyboard: buttons }
		});
	});
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
bot.on('callback_query', async (query) => {
	const userId = query.from.id;
	const username = query.from.username || '';

	if (query.data === 'pay_now') {
		getSubscription(userId, async (sub) => {
			const now = new Date();

			if (sub && new Date(sub.end_date) > now) {
				const end = new Date(sub.end_date).toLocaleString('ru-RU');
				await bot.sendMessage(userId, `‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${end}`);
				return;
			}

			try {
				const res = await fetch('https://ai-analytic.com/stripe/create-checkout-session', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ userId, username })
				});

				const data = await res.json();

				await bot.sendMessage(userId, 'üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:', {
					reply_markup: {
						inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥', url: data.url }]]
					}
				});
			} catch (err) {
				console.error('‚ùå Stripe –æ—à–∏–±–∫–∞:', err.message);
				bot.sendMessage(userId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
			}
		});
	} else if (query.data === 'enter_code') {
		getSubscription(userId, (sub) => {
			const now = new Date();
			if (sub && new Date(sub.end_date) > now) {
				bot.sendMessage(userId, '‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
			} else {
				awaitingCode.add(userId);
				bot.sendMessage(userId, 'üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:');
			}
		});
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–æ–º–æ–∫–æ–¥
bot.on('message', (msg) => {
	const userId = msg.from.id;
	const username = msg.from.username || '';
	const code = msg.text?.trim();

	if (awaitingCode.has(userId) && code) {
		awaitingCode.delete(userId);

		getSubscription(userId, (sub) => {
			const now = new Date();
			if (sub && new Date(sub.end_date) > now) {
				bot.sendMessage(userId, '‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
				return;
			}

			isAccessKeyValid(code, (valid) => {
				if (!valid) {
					bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.');
					return;
				}

				now.setDate(now.getDate() + SUBSCRIPTION_DAYS);
				const endDate = now.toISOString();

				addOrUpdateUser(userId, username, endDate);
				useAccessKey(code, userId, async (success) => {
          if (success) {
            await bot.sendMessage(userId, `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${now.toLocaleString('ru-RU')}`);
        
            try {
              const link = await bot.createChatInviteLink(CHANNEL_ID, {
                creates_join_request: true,
                name: `promo_${userId}_${Date.now()}`
              });
        
              await bot.sendMessage(userId, `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüîó –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª:\n${link.invite_link}`);
            } catch (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err.message);
              await bot.sendMessage(userId, '‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
            }
          } else {
            bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞.');
          }
        });
        
			});
		});
	}
});

// /status ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.onText(/\/status/, (msg) => {
	const userId = msg.from.id;
	getSubscription(userId, (sub) => {
		const now = new Date();

		if (!sub) {
			bot.sendMessage(userId, '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.');
		} else {
			const endDate = new Date(sub.end_date);
			if (endDate > now) {
				bot.sendMessage(userId, `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${endDate.toLocaleString('ru-RU')}`);
			} else {
				bot.sendMessage(userId, `‚åõ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: ${endDate.toLocaleString('ru-RU')}`);
			}
		}
	});
});

// –∑–∞—è–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
bot.on('chat_join_request', async (request) => {
	const userId = request.from.id;
	getSubscription(userId, async (sub) => {
		const now = new Date();

		if (sub && new Date(sub.end_date) > now) {
			try {
				await bot.approveChatJoinRequest(CHANNEL_ID, userId);
				await bot.sendMessage(userId, 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.');
			} catch (err) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: ${userId}`, err.message);
			}
		} else {
			try {
				await bot.declineChatJoinRequest(CHANNEL_ID, userId);
				await bot.sendMessage(userId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /start');
			} catch (err) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: ${userId}`, err.message);
			}
		}
	});
});
