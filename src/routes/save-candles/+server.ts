import type { RequestHandler } from "@sveltejs/kit";
import sqlite3 from "sqlite3";
import fetch from "node-fetch";
import path from "path";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–µ—á–∏
interface Candle {
    time: number;
    open: number;
    high: number;
    low: number;
    close: number;
}

// –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = (symbol: string) => path.join(process.cwd(), "candles", `${symbol}.db`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã SQLite
function openDb(symbol: string) {
    return new sqlite3.Database(dbPath(symbol), (err) => {
        if (err) console.error(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ë–î ${symbol}:`, err);
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
function setupDatabase(symbol: string) {
    const db = openDb(symbol);
    db.run(`
        CREATE TABLE IF NOT EXISTS candles (
            time INTEGER PRIMARY KEY,
            open REAL,
            high REAL,
            low REAL,
            close REAL
        )
    `);
    return db;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite3 (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
const getAsync = <T>(db: sqlite3.Database, sql: string, params: any[] = []): Promise<T | undefined> =>
    new Promise((resolve, reject) => {
        db.get(sql, params, (err, row) => (err ? reject(err) : resolve(row as T | undefined)));
    });

const allAsync = <T>(db: sqlite3.Database, sql: string, params: any[] = []): Promise<T[]> =>
    new Promise((resolve, reject) => {
        db.all(sql, params, (err, rows) => (err ? reject(err) : resolve(rows as T[])));
    });

const runAsync = (db: sqlite3.Database, sql: string, params: any[] = []): Promise<void> =>
    new Promise((resolve, reject) => {
        db.run(sql, params, (err) => (err ? reject(err) : resolve()));
    });

// **–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞**
export const GET: RequestHandler = async (event) => {
    const url = event.url;
    const symbol = url.searchParams.get("symbol")?.toUpperCase() || "BTCUSDT";
    const db = setupDatabase(symbol);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        const lastCandle = await getAsync<Candle>(db, `SELECT * FROM candles ORDER BY time DESC LIMIT 1`);
        const now = Math.floor(Date.now() / 1000);

        if (lastCandle?.time && now - lastCandle.time < 3600) {
            console.log(`üì¶ –û—Ç–¥–∞—ë–º —Å–≤–µ—á–∏ –∏–∑ SQLite –¥–ª—è ${symbol}`);
            const candles = await allAsync<Candle>(db, `SELECT * FROM candles ORDER BY time ASC`);
            return new Response(JSON.stringify(candles), { headers: { "Content-Type": "application/json" } });
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å Binance
        console.log(`üåç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ Binance –¥–ª—è ${symbol}`);
        const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=1h&limit=500`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç
        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ Binance API: ${response.status} ${response.statusText}`);
            return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance" }), { status: 500 });
        }

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
        let data;
        try {
            data = await response.json();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Binance:", error);
            return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö Binance" }), { status: 500 });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data –º–∞—Å—Å–∏–≤–æ–º
        if (!Array.isArray(data)) {
            console.error("‚ùå Binance API –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:", data);
            return new Response(JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö Binance" }), { status: 500 });
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π
        const candles: Candle[] = data.map((c: any) => ({
            time: c[0] / 1000,
            open: parseFloat(c[1]),
            high: parseFloat(c[2]),
            low: parseFloat(c[3]),
            close: parseFloat(c[4]),
        }));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–µ—á–∏ –≤ –±–∞–∑—É
        const insertStmt = `INSERT OR IGNORE INTO candles (time, open, high, low, close) VALUES (?, ?, ?, ?, ?)`;

        for (const candle of candles) {
            await runAsync(db, insertStmt, [candle.time, candle.open, candle.high, candle.low, candle.close]);
        }

        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SQLite.`);
        return new Response(JSON.stringify(candles), { headers: { "Content-Type": "application/json" } });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
        return new Response(JSON.stringify({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }), { status: 500 });
    } finally {
        db.close();
    }
};
